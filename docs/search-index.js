var searchIndex = new Map(JSON.parse('[\
["cargo_auto_lib",{"doc":"cargo_auto_lib","t":"FKPSPSSIFFSOHCHCHCCCHCHCCCCCHCHCHHCCHHHHHCCCHHCHHHOHHHHCHHHHHHHHHMHHHHOMMMMMMMMCHMHHHOOOHCMFFOONNNNONNNNNNONNNNNNNNNNNNNNNNNNFFOOHNNNNNNNNNNNNNNNNNNHHHSHHHHFNNHHNNNNNNHHSSHHHHHHHHHHHHHHHHHHHFNNHHNNHNHHHOOONNNNFHNNHNONNHHNHHOOOOHNNNNFFFFFFOOOOHNNNNNNNNNNNNONNNNNNNNNNNNHNNNNNNOOOOOOOOHHONNNNNNNNNNNNNNNNNNNNNNNNFFFOOOHHNNNNNNHNNNNNNHHNNNNNNNNNNNNNNNFOHNNNNNNNNNPPGHHHHNNNHNHNNNNHHFIIFNNNNHNNHNNHNNNNNNOONNFFHHHHNNNNHNNOOHNNNNHHHHNNHNNNNNNOHNNHPPPGPPIPPNNNNNNNNNNNNNNNNEKSSSEEESHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHMHHHHMMMMMMMMHMHHHHMHHHHHHHHH","n":["CargoToml","CargoTomlPublicApiMethods","Err","GREEN","Ok","RED","RESET","ResultWithLibError","SecretString","ShellOutput","YELLOW","_cargo_toml_main","add_message_to_unreleased","auto_cargo_toml_mod","auto_cargo_toml_to_md","auto_cargo_toml_to_md_mod","auto_check_micro_xml","auto_check_micro_xml_mod","auto_copy_files_to_strings_mod","auto_crates_io_mod","auto_delete_old_js_snippets","auto_delete_old_js_snippets_mod","auto_doc_tidy_html","auto_doc_tidy_html_mod","auto_encrypt_decrypt_with_ssh_mod","auto_git_mod","auto_github_mod","auto_helper_functions_mod","auto_lines_of_code","auto_lines_of_code_mod","auto_md_to_doc_comments","auto_md_to_doc_comments_mod","auto_plantuml","auto_plantuml_for_path","auto_plantuml_mod","auto_playground_mod","auto_playground_run_code","auto_semver_increment_minor","auto_semver_increment_minor_forced","auto_semver_increment_patch","auto_semver_increment_patch_forced","auto_semver_mod","auto_semver_or_date_mod","auto_ssh_mod","auto_version_from_date","auto_version_from_date_forced","auto_version_from_date_mod","auto_version_increment_semver_or_date","auto_version_increment_semver_or_date_forced","body_text_from_releases_md","cargo_toml_workspace_maybe","completion_return_one_or_more_sub_commands","concatenate_vec_to_string","copy_folder_files_into_module","description_and_topics_to_github","error_mod","exit_if_not_run_in_rust_project_root_directory","find_from","find_pos_end_data_before_delimiter","find_pos_start_data_after_delimiter","git_has_remote","git_is_local_repository","git_tag_sync_check_create_push","github_api_create_new_release","github_api_upload_asset_to_release","github_owner","hash_for_filename","home_dir","init_repository_if_needed","now_utc_date_iso","package","package_author_name","package_authors_string","package_description","package_homepage","package_keywords","package_name","package_repository","package_version","public_api_mod","publish_to_crates_io_with_secret_token","read","run_shell_command","run_shell_command_output","run_shell_command_success","status","stderr","stdout","traverse_dir_with_exclude_dir","utils_mod","workspace_members","CargoToml","REGEX_REMOVE_EMAIL","__private_field","_cargo_toml_main","borrow","borrow","borrow_mut","borrow_mut","cargo_toml_workspace_maybe","deref","from","from","github_owner","into","into","package","package_author_name","package_authors_string","package_description","package_homepage","package_keywords","package_name","package_repository","package_version","read","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","workspace_members","REGEX_MD_END","REGEX_MD_START","__private_field","__private_field","auto_cargo_toml_to_md","borrow","borrow","borrow_mut","borrow_mut","deref","deref","from","from","into","into","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","auto_check_micro_xml","check_micro_xml","copy_folder_files_into_module","CRATES_IO_TOKEN_PATH","check_or_get_crates_io_token","publish_to_crates_io_with_secret_token","auto_delete_old_js_snippets","auto_doc_tidy_html","SecretBytes","borrow","borrow_mut","decrypt_with_ssh_from_file","encrypt_with_ssh_interactive_save_file","from","into","try_from","try_into","type_id","vzip","git_has_remote","git_is_local_repository","GITHUB_TOKEN_PATH","RELEASES_MD","add_message_to_unreleased","ask_for_identity_file_path_for_ssh","body_text_from_releases_md","check_or_get_github_token","create_releases_md_if_file_not_exist","description_and_topics_to_github","get_identity_file_path_from_ssh_config","git_tag_sync_check_create_push","github_api_create_new_release","github_api_get_repository","github_api_replace_all_topics","github_api_repository_new","github_api_update_description","github_api_upload_asset_to_release","init_repository_if_needed","new_local_repository","new_remote_github_repository","ssh_add_if_needed","ssh_add_resolve","ShellOutput","borrow","borrow_mut","completion_return_one_or_more_sub_commands","exit_if_not_run_in_rust_project_root_directory","fmt","from","home_dir","into","run_shell_command","run_shell_command_output","run_shell_command_success","status","stderr","stdout","try_from","try_into","type_id","vzip","LinesOfCode","auto_lines_of_code","borrow","borrow_mut","count_lines_of_code","default","examples_lines","fmt","from","git_remote_output","include_into_readme_md","into","process_git_remote","regex_capture","src_code_lines","src_comment_lines","src_doc_comment_lines","tests_lines","to_string_as_shield_badges","try_from","try_into","type_id","vzip","MdSegment","REGEX_MD_END","REGEX_MD_START","REGEX_RS_END","REGEX_RS_START","RsMarker","__private_field","__private_field","__private_field","__private_field","auto_md_to_doc_comments","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","comment_symbol","deref","deref","deref","deref","fmt","fmt","from","from","from","from","from","from","get_md_segments_using_cache","into","into","into","into","into","into","marker_name","marker_name","md_filename","md_filename","pos_end","pos_end","pos_start","pos_start","rs_file_markers","rs_files","text","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","REGEX_IMG_LINK","REGEX_PLANTUML_END","REGEX_PLANTUML_START","__private_field","__private_field","__private_field","auto_plantuml","auto_plantuml_for_path","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","compress_plant_uml_code","deref","deref","deref","from","from","from","get_svg","hash_for_filename","into","into","into","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","REGEX_MD_LINK","__private_field","auto_playground_run_code","borrow","borrow_mut","deref","from","into","try_from","try_into","type_id","vzip","Minor","Patch","VersionPart","auto_semver_increment_minor","auto_semver_increment_minor_forced","auto_semver_increment_patch","auto_semver_increment_patch_forced","borrow","borrow_mut","from","increment_part","into","parse_next_number","try_from","try_into","type_id","vzip","auto_version_increment_semver_or_date","auto_version_increment_semver_or_date_forced","EncryptedString","FingerprintString","IdentityFilePathString","SecretString","borrow","borrow","borrow_mut","borrow_mut","crate_ssh_agent_client","from","from","get_fingerprint_from_file","into","into","ssh_add_list_contains_fingerprint","try_from","try_from","try_into","try_into","type_id","type_id","vec","vec","vzip","vzip","AutoVersionFromDate","FileMetaData","are_files_equal","auto_version_from_date","auto_version_from_date_forced","auto_version_from_date_internal","borrow","borrow","borrow_mut","borrow_mut","correct_file_metadata_for_cargo_tom_inside_vec","deserialize","deserialize","filehash","filename","find_from","from","from","into","into","modify_service_js","read_file_metadata","read_json_file","save_json_file_for_file_meta_data","serialize","serialize","sha256_digest","try_from","try_from","try_into","try_into","type_id","type_id","vec_file_metadata","version_from_date","vzip","vzip","write_version_to_cargo_and_modify_metadata","Err","ErrorFromStr","InfallibleError","LibError","Ok","ParseIntError","ResultWithLibError","SerdeJsonError","StdIoError","borrow","borrow_mut","fmt","fmt","from","from","from","from","from","into","source","to_string","try_from","try_into","type_id","vzip","CargoToml","CargoTomlPublicApiMethods","GREEN","RED","RESET","ResultWithLibError","SecretString","ShellOutput","YELLOW","add_message_to_unreleased","auto_cargo_toml_to_md","auto_check_micro_xml","auto_delete_old_js_snippets","auto_doc_tidy_html","auto_lines_of_code","auto_md_to_doc_comments","auto_plantuml","auto_plantuml_for_path","auto_playground_run_code","auto_semver_increment_minor","auto_semver_increment_minor_forced","auto_semver_increment_patch","auto_semver_increment_patch_forced","auto_version_from_date","auto_version_from_date_forced","auto_version_increment_semver_or_date","auto_version_increment_semver_or_date_forced","body_text_from_releases_md","completion_return_one_or_more_sub_commands","concatenate_vec_to_string","copy_folder_files_into_module","description_and_topics_to_github","exit_if_not_run_in_rust_project_root_directory","find_from","find_pos_end_data_before_delimiter","find_pos_start_data_after_delimiter","git_has_remote","git_is_local_repository","git_tag_sync_check_create_push","github_api_create_new_release","github_api_upload_asset_to_release","github_owner","hash_for_filename","home_dir","init_repository_if_needed","now_utc_date_iso","package_author_name","package_authors_string","package_description","package_homepage","package_keywords","package_name","package_repository","package_version","publish_to_crates_io_with_secret_token","read","run_shell_command","run_shell_command_output","run_shell_command_success","traverse_dir_with_exclude_dir","workspace_members","concatenate_vec_to_string","file_exists","file_path_home_expand","find_from","find_pos_end_data_before_delimiter","find_pos_start_data_after_delimiter","now_utc_date_iso","to_path","traverse_dir_with_exclude_dir"],"q":[[0,"cargo_auto_lib"],[91,"cargo_auto_lib::auto_cargo_toml_mod"],[125,"cargo_auto_lib::auto_cargo_toml_to_md_mod"],[148,"cargo_auto_lib::auto_check_micro_xml_mod"],[150,"cargo_auto_lib::auto_copy_files_to_strings_mod"],[151,"cargo_auto_lib::auto_crates_io_mod"],[154,"cargo_auto_lib::auto_delete_old_js_snippets_mod"],[155,"cargo_auto_lib::auto_doc_tidy_html_mod"],[156,"cargo_auto_lib::auto_encrypt_decrypt_with_ssh_mod"],[167,"cargo_auto_lib::auto_git_mod"],[169,"cargo_auto_lib::auto_github_mod"],[190,"cargo_auto_lib::auto_helper_functions_mod"],[209,"cargo_auto_lib::auto_lines_of_code_mod"],[232,"cargo_auto_lib::auto_md_to_doc_comments_mod"],[310,"cargo_auto_lib::auto_plantuml_mod"],[348,"cargo_auto_lib::auto_playground_mod"],[360,"cargo_auto_lib::auto_semver_mod"],[377,"cargo_auto_lib::auto_semver_or_date_mod"],[379,"cargo_auto_lib::auto_ssh_mod"],[404,"cargo_auto_lib::auto_version_from_date_mod"],[442,"cargo_auto_lib::error_mod"],[467,"cargo_auto_lib::public_api_mod"],[528,"cargo_auto_lib::utils_mod"],[537,"std::path"],[538,"alloc::string"],[539,"core::option"],[540,"alloc::vec"],[541,"std::path"],[542,"regex::regex::string"],[543,"core::result"],[544,"core::any"],[545,"serde_json::value"],[546,"core::fmt"],[547,"core::fmt"],[548,"ssh_agent_client_rs"],[549,"ssh_key::public"],[550,"serde::de"],[551,"serde::ser"],[552,"chrono::offset::utc"],[553,"chrono::datetime"],[554,"core::num::error"],[555,"std::io::error"],[556,"core::convert"],[557,"core::error"]],"d":["Read data from Cargo.toml","trait with methods to read data from Cargo.toml","Contains the error value","ANSI color","Contains the success value","ANSI color","ANSI color","Result&lt;&gt; type with fixed LibError using thiserror","A string that contains secret text","similar to std::process::Output, but with i32 and Strings …","ANSI color","the main Cargo.toml is different for single project or for …","Add commit message to Unreleased in RELEASES.md","functions to get data from Cargo.toml","This function includes data from Cargo.toml to markdown …","includes data from Cargo.toml to <code>md</code> files: version, …","I want html pages to be correct microXML when I use them …","checks the correctness of micro XML files","copy all files from the folder into a module as strings …","push versions to crates.io","deletes old js snippets when working with wasm-pack","deletes old js snippets when working with wasm-pack","Pretty HTML for docs","make HTML pretty","How to save a GitHub TOKEN securely inside a file?","Functions to work with git from automation_tasks_rs","GitHub API calls","various helper functions","This function inserts shield badges with lines_of_code …","inserts shield badges with lines_of_code into README.rs","This function finds rs files with markers and include …","finds rs files with markers and include segments from md …","process plantuml in current directory","process plantuml for all md files for test and examples I …","Includes the plantuml svg generated from the plantuml code","Includes the link to playground with the rust code in a …","Include the link to run code in Rust playground","Increments the minor version in Cargo.toml file only if …","Increments the minor version in Cargo.toml file even if …","Increments the patch version in Cargo.toml file only if …","Increments the patch version in Cargo.toml file even if …","semver utilities","If the major number is greater than 2000, it is a …","Work with ssh keys","New version from date is written to Cargo.toml and …","Just like auto_version_from_date(), but force the new …","new version as date is written to Cargo.toml and …","Increments the version in Cargo.toml","Increments the version in Cargo.toml","Get release text from RELEASES.md","the first Cargo.toml is maybe a workspace","println one, more or all sub_commands","the original <code>concat()</code> function does not have a delimiter","copy all files from the folder into a module as strings …","Check and modify the description and topics on Github","Error library for this crate using thiserror","Check if the code was run inside the Rust project root …","find from_pos","return the position of end of the delimited data before …","return the position of start of the delimited data after …","has git remote","check if this folder is a local Git repository","sync, check, create, push git tag","Create new release on Github","Upload asset to github release  ","github owner from package.repository","hash for file","home_dir() using the home crate.","Init repository if needed","UTC  date in iso standard like 2024-12-31","the package is read from the main Cargo.toml","Cargo.toml package authors as string without emails","Cargo.toml package authors as string","Cargo.toml package description","Cargo.toml package homepage","Cargo.toml package keywords","Cargo.toml package name","Cargo.toml package repository","Cargo.toml package version","public_api_mod","Publish to crates.io","read Cargo.toml, for workspaces it is the Cargo.toml of …","Run one shell command","run one shell command and return ShellOutput {exit_status, …","run one shell command and return true if success","The status (exit code) of the process.","The string that the process wrote to stderr.","The string that the process wrote to stdout.","Traverse dir and its sub-dir, but avoid excluded dirs.","various utilities","Cargo.toml workspace members","Read data from Cargo.toml","remove email from author","","the main Cargo.toml is different for single project or for …","","","","","the first Cargo.toml is maybe a workspace","","Returns the argument unchanged.","Returns the argument unchanged.","github owner from package_repository","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","the package is read from the main Cargo.toml","Cargo.toml package authors as string without emails","Cargo.toml package authors as string","Cargo.toml package repository","Cargo.toml package homepage","Cargo.toml package keywords","Cargo.toml package name","Cargo.toml package repository","Cargo.toml package version","read Cargo.toml, for workspaces it is the Cargo.toml of …","","","","","","","","","Cargo.toml workspace members","regex for end marker","regex for start marker","","","This function includes data from Cargo.toml to markdown …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","I want html pages to be correct microXML when I use them …","panics if the microXML string is not correct","copy all files from the folder into a module as strings …","","decrypt the token from CRATES_IO_TOKEN_PATH file or ask …","Publish to crates.io","deletes old js snippets when working with wasm-pack","Pretty HTML for docs","","","","decrypt from json file with ssh_identity","encrypt a token with the chosen ssh_identity and save as …","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","has git remote","check if this folder is a local Git repository","","","Add commit message to Unreleased in RELEASES.md","Ask the user for the filename of the ssh key used to …","Get release text from RELEASES.md","decrypt the token from GITHUB_TOKEN_PATH file or ask user …","create RELEASES.md if file not exist","Check and modify the description and topics on Github","Parse the ~/.ssh/config file and find the record for …","sync, check, create, push git tag","Create new release on Github","github api get repository","GitHub API replace all topics","creates a new github repository","github api update description and topics","Upload asset to github release  ","Init repository if needed","interactive ask to create a new local git repository","interactive ask to create a new remote GitHub repository","identity_private_file_path contains the path of the …","Check if identity is already in ssh-agent and if not then …","similar to std::process::Output, but with i32 and Strings …","","","println one, more or all sub_commands","Check if the code was run inside the Rust project root …","","Returns the argument unchanged.","home_dir() using the home crate panics if HOME not found","Calls <code>U::from(self)</code>.","Run one shell command","Run one shell command and return ShellOutput {exit_status, …","Run one shell command and return true if success","The status (exit code) of the process.","The string that the process wrote to stderr.","The string that the process wrote to stdout.","","","","","Struct that contains 4 types of lines count: code, doc …","This function inserts shield badges with lines_of_code …","","","private function. Use public count_code_lines().","","all lines in examples files","","Returns the argument unchanged.","","Includes (writes, modifies) the shield badge code into …","Calls <code>U::from(self)</code>.","Return the string for link for badges like: …","returns a Result. in the case of error the calling fn will …","lines with code in srs files","lines with comments in srs files","lines with doc_comments in srs files","unit plus integration tests","Returns a string with the markdown code for 4 shield …","","","","","","","","","","","","","","","This function finds rs files with markers and include …","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","The first time it is called read the file and extracts all …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","markers in rs files","All rs files in src, tests and examples folders. The …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Includes the plantuml svg generated from the plantuml code.","process plantuml for all md files for test and examples I …","","","","","","","deflate and strange base64, that is Url_safe","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","hash for file","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","capture the link in markdown style name","","Include the link to run code in Rust playground","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","Increments the minor version in Cargo.toml file only if …","Increments the minor version in Cargo.toml file even if …","Increments the patch version in Cargo.toml file only if …","Increments the patch version in Cargo.toml file even if …","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","Increments the version in Cargo.toml","increments the version in Cargo.toml.","","","","","","","","","The work with ssh_agent_client_rs starts with a client","Returns the argument unchanged.","Returns the argument unchanged.","the parameter is the filepath of the private key But the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","returns the public_key inside ssh-add or None","","","","","","","","","","","the struct that represents the file …","file metadata","if files are added or deleted, other files must be also …","New version from date is written to Cargo.toml and …","Just like auto_version_from_date(), but force the new …","","","","","","the Cargo.toml is now different and needs to be changed in …","","","hash of file","filename with path from Cargo.toml folder","in string find from position","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","search for file service_worker.js and modify version","make a vector of file metadata","read .automation_tasks_rs_file_hashes.json","save the new file metadata","","","calculate the hash for a file","","","","","","","vector of file metadata","converts a date to a version","","","move vec_of_metadata","Contains the error value","","","list of possible errors from this library","Contains the success value","","Result&lt;&gt; type with fixed LibError using thiserror","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","trait with methods to read data from Cargo.toml","ANSI color","ANSI color","ANSI color","","A string that contains secret text","","ANSI color","Add commit message to Unreleased in RELEASES.md","This function includes data from Cargo.toml to markdown …","I want html pages to be correct microXML when I use them …","deletes old js snippets when working with wasm-pack","Pretty HTML for docs","This function inserts shield badges with lines_of_code …","This function finds rs files with markers and include …","process plantuml in current directory","process plantuml for all md files for test and examples I …","Include the link to run code in Rust playground","Increments the minor version in Cargo.toml file only if …","Increments the minor version in Cargo.toml file even if …","Increments the patch version in Cargo.toml file only if …","Increments the patch version in Cargo.toml file even if …","New version from date is written to Cargo.toml and …","Just like auto_version_from_date(), but force the new …","Increments the version in Cargo.toml","Increments the version in Cargo.toml","Get release text from RELEASES.md","println one, more or all sub_commands","the original <code>concat()</code> function does not have a delimiter","copy all files from the folder into a module as strings …","Check and modify the description and topics on Github","Check if the code was run inside the Rust project root …","find from_pos","return the position of end of the delimited data before …","return the position of start of the delimited data after …","has git remote","check if this folder is a local Git repository","sync, check, create, push git tag","Create new release on Github","Upload asset to github release  ","github owner from package.repository","hash for file","home_dir() using the home crate.","Init repository if needed","UTC  date in iso standard like 2024-12-31","Cargo.toml package authors as string without emails","Cargo.toml package authors as string","Cargo.toml package description","Cargo.toml package homepage","Cargo.toml package keywords","Cargo.toml package name","Cargo.toml package repository","Cargo.toml package version","Publish to crates.io","read Cargo.toml, for workspaces it is the Cargo.toml of …","Run one shell command","run one shell command and return ShellOutput {exit_status, …","run one shell command and return true if success","Traverse dir and its sub-dir, but avoid excluded dirs.","Cargo.toml workspace members","the original <code>concat()</code> function does not have a delimiter","check if file exists","expands the ~ for home_dir and returns expanded path","find from_pos","return the position of end of the delimited data before …","return the position of start of the delimited data after …","UTC  date in iso standard like 2024-12-31","just a shorter way to get a Path from a String","Traverse dir and its sub-dir, but avoid excluded dirs."],"i":[0,0,3,0,3,0,0,0,0,0,0,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,17,11,11,11,11,11,11,11,11,0,0,11,0,0,0,13,13,13,0,0,11,0,0,15,17,17,15,17,15,17,15,17,15,17,17,15,17,17,17,17,17,17,17,17,17,17,17,15,17,15,17,15,17,15,17,0,0,20,21,0,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,0,0,0,0,0,0,0,0,0,53,53,0,0,53,53,53,53,53,53,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,13,0,0,13,13,0,13,0,0,0,13,13,13,13,13,13,13,0,0,26,26,0,26,26,26,26,0,0,26,0,0,26,26,26,26,0,26,26,26,26,0,0,0,0,0,0,28,29,30,31,0,32,33,28,29,30,31,32,33,28,29,30,31,32,28,29,30,31,32,33,32,33,28,29,30,31,0,32,33,28,29,30,31,32,33,32,33,32,33,32,33,0,0,33,32,33,28,29,30,31,32,33,28,29,30,31,32,33,28,29,30,31,32,33,28,29,30,31,0,0,0,34,35,36,0,0,34,35,36,34,35,36,0,34,35,36,34,35,36,0,0,34,35,36,34,35,36,34,35,36,34,35,36,34,35,36,0,37,0,37,37,37,37,37,37,37,37,37,38,38,0,0,0,0,0,38,38,38,0,38,0,38,38,38,38,0,0,0,0,0,0,22,54,22,54,0,22,54,0,22,54,0,22,54,22,54,22,54,55,56,22,54,0,0,0,0,0,0,41,43,41,43,0,41,43,41,41,0,41,43,41,43,0,0,0,0,41,43,0,41,43,41,43,41,43,43,0,41,43,0,3,47,47,0,3,47,0,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,11,11,11,11,11,11,11,11,0,11,0,0,0,0,11,0,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,[1,2],0,[[],2],0,[1,2],0,0,0,[[],2],0,[[],[[3,[2]]]],0,0,0,0,0,[1,2],0,[[],2],0,[1,2],[[4,1],2],0,0,[[],2],[[],2],[[],2],[[],2],[[],2],0,0,0,[[],2],[[],2],0,[[],2],[[],2],[1,[[6,[5]]]],0,[[[7,[1]],1],2],[[[8,[5]],1],5],[[4,4,[8,[1]],[8,[5]]],2],[[],2],0,[[],2],[[1,9,1],[[6,[9]]]],[[1,9,1],[[6,[9]]]],[[1,9,1],[[6,[9]]]],[[],10],[[],10],[1,5],[[1,1,1,1,1,1],5],[[1,1,1,1],2],[11,[[6,[5]]]],[1,5],[[],12],[1,10],[[],5],0,[11,5],[11,5],[11,[[6,[5]]]],[11,5],[11,[[7,[5]]]],[11,5],[11,[[6,[5]]]],[11,5],0,[[],2],[[],11],[1,2],[1,13],[1,10],0,0,0,[[4,1,[8,[5]]],[[14,[[7,[5]]]]]],0,[11,[[6,[[7,[5]]]]]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[15,16],[-1,-1,[]],[-1,-1,[]],[17,[[6,[5]]]],[-1,-2,[],[]],[-1,-2,[],[]],0,[17,5],[17,5],[17,[[6,[5]]]],[17,5],[17,[[7,[5]]]],[17,5],[17,[[6,[5]]]],[17,5],[[],17],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,19,[]],[-1,19,[]],[-1,-2,[],[]],[-1,-2,[],[]],[17,[[6,[[7,[5]]]]]],0,0,0,0,[[],2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[20,16],[21,16],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,19,[]],[-1,19,[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,2],[[1,1],2],[[4,4,[8,[1]],[8,[5]]],2],0,[[],[[6,[22]]]],[[],2],[[],2],[[],[[3,[2]]]],0,[-1,-2,[],[]],[-1,-2,[],[]],[1,[[6,[22]]]],[[1,1],2],[-1,-1,[]],[-1,-2,[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,19,[]],[-1,-2,[],[]],[[],10],[[],10],0,0,[1,2],[[1,1],[[6,[5]]]],[1,[[6,[5]]]],[[],[[6,[22]]]],[[],2],[[],2],[1,[[6,[5]]]],[1,5],[[1,1,1,1,1,1],5],[[1,1],23],[[1,1,[7,[5]]],2],[[1,1,1],23],[[1,1,1],2],[[1,1,1,1],2],[1,10],[1,[[6,[2]]]],[[],[[6,[5]]]],[1,[[6,[5]]]],[[1,1],[[6,[[2,[5,5]]]]]],0,[-1,-2,[],[]],[-1,-2,[],[]],[[[7,[1]],1],2],[[],2],[[13,24],25],[-1,-1,[]],[[],12],[-1,-2,[],[]],[1,2],[1,13],[1,10],0,0,0,[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,19,[]],[-1,-2,[],[]],0,[1,2],[-1,-2,[],[]],[-1,-2,[],[]],[[],26],[[],26],0,[[26,24],25],[-1,-1,[]],[[],[[27,[5]]]],[1,2],[-1,-2,[],[]],[[],5],[5,[[27,[5]]]],0,0,0,0,[[26,1],5],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,19,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,[[],2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[28,16],[29,16],[30,16],[31,16],[[32,24],25],[[33,24],25],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[7,[33]],1,1,1],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,[1,[[7,[32]]]],[[],[[7,[5]]]],0,[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,[1,2],[[4,1],2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,5],[34,16],[35,16],[36,16],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[1,5],[1,5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[],2],[-1,-2,[],[]],[-1,-2,[],[]],[37,16],[-1,-1,[]],[-1,-2,[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,19,[]],[-1,-2,[],[]],0,0,0,[[],2],[[],2],[[],2],[[],2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[[38,10],[[3,[2]]]],[-1,-2,[],[]],[[1,9],[[3,[[2,[9,9]]]]]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,19,[]],[-1,-2,[],[]],[[],2],[[],2],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],39],[-1,-1,[]],[-1,-1,[]],[1,5],[-1,-2,[],[]],[-1,-2,[],[]],[[39,1],[[6,[40]]]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,19,[]],[-1,19,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[[8,[41]],[8,[41]]],10],[[],2],[[],2],[10,[[3,[2]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[8,[41]]],[[3,[2]]]],[-1,[[18,[41]]],42],[-1,[[18,[43]]],42],0,0,[[1,9,1],[[6,[9]]]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,2],[[],[[3,[[7,[41]]]]]],[1,[[3,[43]]]],[[[7,[41]]],2],[[41,-1],18,44],[[43,-1],18,44],[4,[[3,[5]]]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,19,[]],[-1,19,[]],0,[[[46,[45]]],5],[-1,-2,[],[]],[-1,-2,[],[]],[[1,[7,[41]]],[[3,[2]]]],0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[47,24],25],[[47,24],25],[48,47],[49,47],[50,47],[-1,-1,[]],[51,47],[-1,-2,[],[]],[47,[[6,[52]]]],[-1,5,[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,19,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,[1,2],[[],2],[1,2],[[],2],[[],[[3,[2]]]],[1,2],[[],2],[1,2],[[4,1],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[1,[[6,[5]]]],[[[7,[1]],1],2],[[[8,[5]],1],5],[[4,4,[8,[1]],[8,[5]]],2],[[],2],[[],2],[[1,9,1],[[6,[9]]]],[[1,9,1],[[6,[9]]]],[[1,9,1],[[6,[9]]]],[[],10],[[],10],[1,5],[[1,1,1,1,1,1],5],[[1,1,1,1],2],[11,[[6,[5]]]],[1,5],[[],12],[1,10],[[],5],[11,5],[11,5],[11,[[6,[5]]]],[11,5],[11,[[7,[5]]]],[11,5],[11,[[6,[5]]]],[11,5],[[],2],[[],11],[1,2],[1,13],[1,10],[[4,1,[8,[5]]],[[14,[[7,[5]]]]]],[11,[[6,[[7,[5]]]]]],[[[8,[5]],1],5],[1,10],[1,5],[[1,9,1],[[6,[9]]]],[[1,9,1],[[6,[9]]]],[[1,9,1],[[6,[9]]]],[[],5],[1,4],[[4,1,[8,[5]]],[[14,[[7,[5]]]]]]],"c":[],"p":[[1,"str"],[1,"tuple"],[8,"ResultWithLibError",442],[5,"Path",537],[5,"String",538],[6,"Option",539],[5,"Vec",540],[1,"slice"],[1,"usize"],[1,"bool"],[10,"CargoTomlPublicApiMethods",467],[5,"PathBuf",537],[5,"ShellOutput",190],[8,"Result",541],[5,"REGEX_REMOVE_EMAIL",91],[5,"Regex",542],[5,"CargoToml",91],[6,"Result",543],[5,"TypeId",544],[5,"REGEX_MD_START",125],[5,"REGEX_MD_END",125],[5,"SecretString",379],[6,"Value",545],[5,"Formatter",546],[8,"Result",546],[5,"LinesOfCode",209],[8,"Result",547],[5,"REGEX_RS_START",232],[5,"REGEX_RS_END",232],[5,"REGEX_MD_START",232],[5,"REGEX_MD_END",232],[5,"RsMarker",232],[5,"MdSegment",232],[5,"REGEX_PLANTUML_START",310],[5,"REGEX_PLANTUML_END",310],[5,"REGEX_IMG_LINK",310],[5,"REGEX_MD_LINK",348],[6,"VersionPart",360],[5,"Client",548],[5,"PublicKey",549],[5,"FileMetaData",404],[10,"Deserializer",550],[5,"AutoVersionFromDate",404],[10,"Serializer",551],[5,"Utc",552],[5,"DateTime",553],[6,"LibError",442],[5,"ParseIntError",554],[5,"Error",541],[5,"Error",555],[6,"Infallible",556],[10,"Error",557],[5,"SecretBytes",156],[5,"EncryptedString",379],[8,"FingerprintString",379],[8,"IdentityFilePathString",379]],"b":[[453,"impl-Display-for-LibError"],[454,"impl-Debug-for-LibError"],[455,"impl-From%3CParseIntError%3E-for-LibError"],[456,"impl-From%3CError%3E-for-LibError"],[457,"impl-From%3CError%3E-for-LibError"],[459,"impl-From%3CInfallible%3E-for-LibError"]]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);

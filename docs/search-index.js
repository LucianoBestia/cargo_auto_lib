var searchIndex = JSON.parse('{\
"cargo_auto_lib":{"doc":"cargo_auto_lib","t":"DRRRRMAFAFAFAAFAFAFFAFFFFAAFFAFFMFFFMFFADDMMLLLLMLLLLLMLLLLLLLLLLLLLLLDDMMFLLLLLLFLLLLLLLLLLFFFFRRRRFFFFDFLLLMLLFFLFFFMMMMFLLLDDDDDDMMMMFLLLLLLLLLLLLMLLLLLLLLLLLLFLLLLLLMMMMFMMMMFFMLLLLLLLLLLLLLLLLLLDDDMMMFFLLLLLLFLLLLLLFFLLLLLLLLLLLLNNEFFFFLLLFLFLLLFFFFDDFFFFLLLLFLLFMMFLLLLFFFFLLLLLLLLMFFFFFFF","n":["CargoToml","GREEN","RED","RESET","YELLOW","_cargo_toml_main","auto_cargo_toml_mod","auto_cargo_toml_to_md","auto_cargo_toml_to_md_mod","auto_check_micro_xml","auto_check_micro_xml_mod","auto_delete_old_js_snippets","auto_delete_old_js_snippets_mod","auto_helper_functions_mod","auto_lines_of_code","auto_lines_of_code_mod","auto_md_to_doc_comments","auto_md_to_doc_comments_mod","auto_plantuml","auto_plantuml_for_path","auto_plantuml_mod","auto_semver_increment_minor","auto_semver_increment_minor_forced","auto_semver_increment_patch","auto_semver_increment_patch_forced","auto_semver_mod","auto_semver_or_date_mod","auto_version_from_date","auto_version_from_date_forced","auto_version_from_date_mod","auto_version_increment_semver_or_date","auto_version_increment_semver_or_date_forced","cargo_toml_workspace_maybe","completion_return_one_or_more_sub_commands","exit_if_not_run_in_rust_project_root_directory","hash_for_filename","package","run_shell_command","run_shell_commands","utils_mod","CargoToml","REGEX_REMOVE_EMAIL","__private_field","_cargo_toml_main","borrow","borrow","borrow_mut","borrow_mut","cargo_toml_workspace_maybe","deref","from","from","into","into","package","package_author_name","package_authors_string","package_description","package_homepage","package_name","package_repository","package_version","read","try_from","try_from","try_into","try_into","type_id","type_id","workspace_members","REGEX_MD_END","REGEX_MD_START","__private_field","__private_field","auto_cargo_toml_to_md","borrow","borrow","borrow_mut","borrow_mut","deref","deref","do_one_project","from","from","into","into","try_from","try_from","try_into","try_into","type_id","type_id","utc_now","auto_check_micro_xml","check_micro_xml","auto_delete_old_js_snippets","GREEN","RED","RESET","YELLOW","completion_return_one_or_more_sub_commands","exit_if_not_run_in_rust_project_root_directory","run_shell_command","run_shell_commands","LinesOfCode","auto_lines_of_code","borrow","borrow_mut","default","examples_lines","fmt","from","git_remote_output","include_into_readme_md","into","one_project_count_lines","process_git_remote","regex_capture","src_code_lines","src_comment_lines","src_doc_comment_lines","tests_lines","to_string_as_shield_badges","try_from","try_into","type_id","MdSegment","REGEX_MD_END","REGEX_MD_START","REGEX_RS_END","REGEX_RS_START","RsMarker","__private_field","__private_field","__private_field","__private_field","auto_md_to_doc_comments","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","comment_symbol","deref","deref","deref","deref","fmt","fmt","from","from","from","from","from","from","get_md_segments_using_cache","into","into","into","into","into","into","marker_name","marker_name","md_filename","md_filename","one_project","pos_end","pos_end","pos_start","pos_start","rs_file_markers","rs_files","text","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","REGEX_IMG_LINK","REGEX_PLANTUML_END","REGEX_PLANTUML_START","__private_field","__private_field","__private_field","auto_plantuml","auto_plantuml_for_path","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","compress_plant_uml_code","deref","deref","deref","from","from","from","get_svg","hash_for_filename","into","into","into","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","Minor","Patch","VersionPart","auto_semver_increment_minor","auto_semver_increment_minor_forced","auto_semver_increment_patch","auto_semver_increment_patch_forced","borrow","borrow_mut","from","increment_part","into","parse_next_number","try_from","try_into","type_id","auto_version_increment_semver_or_date","auto_version_increment_semver_or_date_forced","one_project","one_project_forced","AutoVersionFromDate","FileMetaData","are_files_equal","auto_version_from_date","auto_version_from_date_forced","auto_version_from_date_internal","borrow","borrow","borrow_mut","borrow_mut","correct_file_metadata_for_cargo_tom_inside_vec","deserialize","deserialize","do_one_project","filedate","filename","find_from","from","from","into","into","modify_service_js","read_file_metadata","read_json_file","save_json_file_for_file_meta_data","serialize","serialize","try_from","try_from","try_into","try_into","type_id","type_id","vec_file_metadata","version_from_date","write_version_to_cargo_and_modify_metadata","concatenate_vec_to_string","find_from","find_pos_end_data_before_delimiter","find_pos_start_data_after_delimiter","traverse_dir_with_exclude_dir"],"q":[[0,"cargo_auto_lib"],[40,"cargo_auto_lib::auto_cargo_toml_mod"],[70,"cargo_auto_lib::auto_cargo_toml_to_md_mod"],[93,"cargo_auto_lib::auto_check_micro_xml_mod"],[95,"cargo_auto_lib::auto_delete_old_js_snippets_mod"],[96,"cargo_auto_lib::auto_helper_functions_mod"],[104,"cargo_auto_lib::auto_lines_of_code_mod"],[126,"cargo_auto_lib::auto_md_to_doc_comments_mod"],[199,"cargo_auto_lib::auto_plantuml_mod"],[234,"cargo_auto_lib::auto_semver_mod"],[250,"cargo_auto_lib::auto_semver_or_date_mod"],[254,"cargo_auto_lib::auto_version_from_date_mod"],[290,"cargo_auto_lib::utils_mod"],[295,"std::path"],[296,"alloc::vec"],[297,"alloc::string"],[298,"regex::regex::string"],[299,"core::option"],[300,"core::result"],[301,"core::any"],[302,"core::fmt"],[303,"core::fmt"],[304,"serde::de"],[305,"serde::ser"],[306,"chrono::offset::utc"],[307,"chrono::datetime"],[308,"std::io::error"]],"d":["","","","","","the main Cargo.toml is different for single project or for …","functions to get data from Cargo.toml It works for …","includes data from Cargo.toml to README.md files: version, …","includes data from Cargo.toml to README.md files: version, …","I want html pages to be correct microXML when I use them …","","deletes old js snippets when working with wasm-pack The …","deletes old js snippets when working with wasm-pack","various helper functions","inserts shield badges with lines_of_code into README.rs …","inserts shield badges with lines_of_code into README.rs It …","finds rs files with markers and include segments from md …","finds rs files with markers and include segments from md …","process plantuml in current directory finds markers …","process plantuml for all md files for test and examples I …","Find md files. Search for marker (auto_plantuml start) and …","Increments the minor version in Cargo.toml file only if …","Increments the minor version in Cargo.toml file even if …","Increments the patch version in Cargo.toml file only if …","Increments the patch version in Cargo.toml file even if …","semver utilities","it reads the version in Cargo.toml and if the major number …","Works for single projects and workspaces. new version as …","Works for single projects and workspaces. Just like …","new version as date is written to Cargo.toml and …","increments the version in Cargo.toml. if the major version …","increments the version in Cargo.toml. if the major version …","the first Cargo.toml is maybe a workspace","println one, more or all sub_commands","check if run in rust project root directory error there …","","the package is read from the main Cargo.toml","run one shell command Stops task execution if the command …","run shell commands from a vector of strings. Stops task …","various utilities","","","","the main Cargo.toml is different for single project or for …","","","","","the first Cargo.toml is maybe a workspace","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","the package is read from the main Cargo.toml","Cargo.toml package authors as string without emails","Cargo.toml package authors as string","Cargo.toml package repository","Cargo.toml package homepage","Cargo.toml package name","Cargo.toml package repository","Cargo.toml package version","read Cargo.toml, for workspaces it is the Cargo.toml of …","","","","","","","Cargo.toml workspace members","","","","","includes data from Cargo.toml to README.md files: version, …","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","utc now","I want html pages to be correct microXML when I use them …","panics if the microXML string is not correct","deletes old js snippets when working with wasm-pack The …","","","","","println one, more or all sub_commands","check if run in rust project root directory error there …","run one shell command Stops task execution if the command …","run shell commands from a vector of strings. Stops task …","Struct that contains 4 types of lines count: code, doc …","inserts shield badges with lines_of_code into README.rs …","","","","all lines in examples files","","Returns the argument unchanged.","","Includes (writes, modifies) the shield badge code into …","Calls <code>U::from(self)</code>.","private function. Use public …","Return the string for link for badges like: …","returns a Result. in the case of error the calling fn will …","lines with code in srs files","lines with comments in srs files","lines with doc_comments in srs files","unit plus integration tests","Returns a string with the markdown code for 4 shield …","","","","","","","","","","","","","","finds rs files with markers and include segments from md …","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","The first time it is called reads the file and extracts …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","markers in rs files","All rs files in src, tests and examples folders. The …","","","","","","","","","","","","","","","","","","","","","","","","","","process plantuml in current directory finds markers …","process plantuml for all md files for test and examples I …","","","","","","","deflate and strange base64, that is Url_safe","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Increments the minor version in Cargo.toml file only if …","Increments the minor version in Cargo.toml file even if …","Increments the patch version in Cargo.toml file only if …","Increments the patch version in Cargo.toml file even if …","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","increments the version in Cargo.toml. if the major version …","increments the version in Cargo.toml. if the major version …","","","the struct that represents the file …","file metadata","if files are added or deleted, other files must be also …","Works for single projects and workspaces. new version as …","Works for single projects and workspaces. Just like …","","","","","","the Cargo.toml is now different and needs to be changed in …","","","","filedate from file","filename with path from Cargo.toml folder","in string find from position","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","search for file service_worker.js and modify version","make a vector of file metadata","read .auto_version_from_date.json","save the new file metadata","","","","","","","","","vector of file metadata","converts a date to a version","move vec_of_metadata","the original <code>concat()</code> function does not have a delimiter","find from_pos","return the position of end of the delimited data before …","return the position of start of the delimited data after …","The find_file and the exclude dir strings must start with …"],"i":[0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,8,0,0,0,0,0,6,8,8,6,8,6,8,6,8,6,8,6,8,8,8,8,8,8,8,8,8,8,6,8,6,8,6,8,0,0,12,13,0,12,13,12,13,12,13,0,12,13,12,13,12,13,12,13,12,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,14,14,14,14,14,0,0,14,0,0,0,14,14,14,14,0,14,14,14,0,0,0,0,0,0,18,19,20,21,0,22,23,18,19,20,21,22,23,18,19,20,21,22,18,19,20,21,22,23,22,23,18,19,20,21,0,22,23,18,19,20,21,22,23,22,23,0,22,23,22,23,0,0,23,22,23,18,19,20,21,22,23,18,19,20,21,22,23,18,19,20,21,0,0,0,24,25,26,0,0,24,25,26,24,25,26,0,24,25,26,24,25,26,0,0,24,25,26,24,25,26,24,25,26,24,25,26,27,27,0,0,0,0,0,27,27,27,0,27,0,27,27,27,0,0,0,0,0,0,0,0,0,0,30,32,30,32,0,30,32,0,30,30,0,30,32,30,32,0,0,0,0,30,32,30,32,30,32,30,32,32,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,[[],1],0,[2,1],0,[[],1],0,0,[2,1],0,[[],1],0,[2,1],[[3,2],1],0,[[],1],[[],1],[[],1],[[],1],0,0,[[],1],[[],1],0,[[],1],[[],1],0,[[[4,[2]],2],1],[[],1],[2,5],0,[2,1],[[[4,[2]]],1],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[6,7],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[8,5],[8,5],[8,[[9,[5]]]],[8,5],[8,5],[8,[[9,[5]]]],[8,5],[[],8],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],[-1,11,[]],[8,[[9,[[4,[5]]]]]],0,0,0,0,[[],1],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[12,7],[13,7],[[],1],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],[-1,11,[]],[[],5],[2,1],[[2,2],1],[[],1],0,0,0,0,[[[4,[2]],2],1],[[],1],[2,1],[[[4,[2]]],1],0,[2,1],[-1,-2,[],[]],[-1,-2,[],[]],[[],14],0,[[14,15],16],[-1,-1,[]],[[],[[17,[5]]]],[2,1],[-1,-2,[],[]],[[],14],[[],5],[5,[[17,[5]]]],0,0,0,0,[[14,2],5],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],0,0,0,0,0,0,0,0,0,0,[[],1],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[18,7],[19,7],[20,7],[21,7],[[22,15],16],[[23,15],16],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[4,[23]],2,2,2],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,[[],1],0,0,0,0,[2,[[4,[22]]]],[[],[[4,[5]]]],0,[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],0,0,0,0,0,0,[2,1],[[3,2],1],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[2,5],[24,7],[25,7],[26,7],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[2,5],[2,5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],0,0,0,[[],1],[[],1],[[],1],[[],1],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[[27,28],1],[-1,-2,[],[]],[[2,29],[[1,[29,29]]]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],[[],1],[[],1],[[],1],[[],1],0,0,[[[4,[30]],[4,[30]]],28],[[],1],[[],1],[28,1],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[4,[30]]],1],[-1,[[10,[30]]],31],[-1,[[10,[32]]],31],[[2,28],1],0,0,[[2,29,2],[[9,[29]]]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[2,1],[[],[[4,[30]]]],[2,32],[[[4,[30]]],1],[[30,-1],10,33],[[32,-1],10,33],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],[-1,11,[]],0,[[[35,[34]]],5],[[2,[4,[30]]],1],[[[4,[5]],2],5],[[2,29,2],[[9,[29]]]],[[2,29,2],[[9,[29]]]],[[2,29,2],[[9,[29]]]],[[3,2,[36,[5]]],[[37,[[4,[5]]]]]]],"c":[],"p":[[15,"tuple"],[15,"str"],[3,"Path",295],[3,"Vec",296],[3,"String",297],[3,"REGEX_REMOVE_EMAIL",40],[3,"Regex",298],[3,"CargoToml",40],[4,"Option",299],[4,"Result",300],[3,"TypeId",301],[3,"REGEX_MD_START",70],[3,"REGEX_MD_END",70],[3,"LinesOfCode",104],[3,"Formatter",302],[6,"Result",302],[6,"Result",303],[3,"REGEX_RS_START",126],[3,"REGEX_RS_END",126],[3,"REGEX_MD_START",126],[3,"REGEX_MD_END",126],[3,"RsMarker",126],[3,"MdSegment",126],[3,"REGEX_PLANTUML_START",199],[3,"REGEX_PLANTUML_END",199],[3,"REGEX_IMG_LINK",199],[4,"VersionPart",234],[15,"bool"],[15,"usize"],[3,"FileMetaData",254],[8,"Deserializer",304],[3,"AutoVersionFromDate",254],[8,"Serializer",305],[3,"Utc",306],[3,"DateTime",307],[15,"slice"],[6,"Result",308]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
